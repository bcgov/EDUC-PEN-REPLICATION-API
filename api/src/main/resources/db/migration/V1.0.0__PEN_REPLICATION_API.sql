CREATE TABLE PEN_REPLICATION_EVENT
(
    PEN_REPLICATION_EVENT_ID RAW(16)                             NOT NULL,
    EVENT_ID                 RAW(16)                             NOT NULL,
    EVENT_PAYLOAD            BLOB                                NOT NULL,
    EVENT_STATUS             VARCHAR2(50)                        NOT NULL,
    EVENT_TYPE               VARCHAR2(100)                       NOT NULL,
    EVENT_OUTCOME            VARCHAR2(100)                       NOT NULL,
    CREATE_USER              VARCHAR(32)                         NOT NULL,
    CREATE_DATE              TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATE_USER              VARCHAR(32)                         NOT NULL,
    UPDATE_DATE              TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PEN_REPLICATION_EVENT_PK PRIMARY KEY (PEN_REPLICATION_EVENT_ID)
) TABLESPACE API_PEN_BLOB_DATA;

CREATE INDEX PEN_REPLICATION_EVENT_EVENT_STATUS_IDX ON PEN_REPLICATION_EVENT (EVENT_STATUS);
CREATE INDEX PEN_REPLICATION_EVENT_EVENT_TYPE_IDX ON PEN_REPLICATION_EVENT (EVENT_TYPE);
ALTER TABLE PEN_REPLICATION_EVENT
    ADD CONSTRAINT PEN_REPLICATION_EVENT_EVENT_ID_UK UNIQUE (EVENT_ID);

COMMENT ON TABLE PEN_REPLICATION_EVENT IS 'This table is used to store all the received choreographed events from different api via pub/sub model and process them.';

ALTER INDEX API_PEN_REPLICATION.PEN_REPLICATION_EVENT_PK REBUILD TABLESPACE API_PEN_IDX;
ALTER INDEX API_PEN_REPLICATION.PEN_REPLICATION_EVENT_EVENT_STATUS_IDX REBUILD TABLESPACE API_PEN_IDX;
ALTER INDEX API_PEN_REPLICATION.PEN_REPLICATION_EVENT_EVENT_TYPE_IDX REBUILD TABLESPACE API_PEN_IDX;
ALTER INDEX API_PEN_REPLICATION.PEN_REPLICATION_EVENT_EVENT_ID_UK REBUILD TABLESPACE API_PEN_IDX;

CREATE TABLE PEN_REPLICATION_SHEDLOCK
(
    NAME       VARCHAR(64),
    LOCK_UNTIL TIMESTAMP(3) NULL,
    LOCKED_AT  TIMESTAMP(3) NULL,
    LOCKED_BY  VARCHAR(255),
    CONSTRAINT PEN_REPLICATION_SHEDLOCK_PK PRIMARY KEY (NAME)
);
COMMENT ON TABLE PEN_REPLICATION_SHEDLOCK IS 'This table is used to achieve distributed lock between pods, for schedulers.';

ALTER INDEX API_PEN_REPLICATION.PEN_REPLICATION_SHEDLOCK_PK REBUILD TABLESPACE API_PEN_IDX;

CREATE OR REPLACE EDITIONABLE SYNONYM PEN_DEMOG FOR "PEN_DEMOG"@"PENLINK.WORLD";
CREATE OR REPLACE EDITIONABLE SYNONYM PEN_AUDIT FOR "PEN_AUDIT"@"PENLINK.WORLD";
CREATE OR REPLACE EDITIONABLE SYNONYM PEN_TWINS FOR "PEN_TWINS"@"PENLINK.WORLD";
CREATE OR REPLACE EDITIONABLE SYNONYM PEN_MERGES FOR "PEN_MERGES"@"PENLINK.WORLD";

--------------------------------------------------------
--  DDL for Table PEN_DEMOG_TX
--------------------------------------------------------
CREATE TABLE API_PEN_REPLICATION.PEN_DEMOG_TX
(
    TX_ID                  VARCHAR2(10),
    TX_TYPE                VARCHAR2(4),
    TX_STATUS              VARCHAR2(4),
    TX_INSERT_DATE_TIME    TIMESTAMP(6),
    TX_PROCESSED_DATE_TIME TIMESTAMP(6),
    STUD_NO                VARCHAR2(10),
    STUD_SURNAME           VARCHAR2(25),
    STUD_GIVEN             VARCHAR2(25),
    STUD_MIDDLE            VARCHAR2(25),
    USUAL_SURNAME          VARCHAR2(25),
    USUAL_GIVEN            VARCHAR2(25),
    USUAL_MIDDLE           VARCHAR2(25),
    STUD_BIRTH             VARCHAR2(8),
    STUD_SEX               VARCHAR2(1),
    STUD_DEMOG_CODE        VARCHAR2(1),
    STUD_STATUS            VARCHAR2(1),
    PEN_LOCAL_ID           VARCHAR2(12),
    PEN_MINCODE            VARCHAR2(8),
    POSTAL                 VARCHAR2(7),
    STUD_TRUE_NO           VARCHAR2(10),
    MERGE_TO_USER_NAME     VARCHAR2(15),
    MERGE_TO_CODE          VARCHAR2(2),
    CREATE_DATE            DATE,
    CREATE_USER_NAME       VARCHAR2(15),
    UPDATE_DATE            DATE,
    UPDATE_USER_NAME       VARCHAR2(15),
    STUD_GRADE             VARCHAR2(2),
    STUD_GRADE_YEAR        NUMBER(4, 0),
    UPDATE_DEMOG_DATE      DATE,
    MERGE_TO_DATE          DATE
);

--------------------------------------------------------
--  DDL for Table PEN_DEMOG_TX
--------------------------------------------------------
CREATE TABLE API_PEN_REPLICATION.PEN_TWINS_TX
(
    TX_ID                  VARCHAR2(10),
    TX_TYPE                VARCHAR2(4),
    TX_STATUS              VARCHAR2(4),
    TX_INSERT_DATE_TIME    TIMESTAMP(6),
    TX_PROCESSED_DATE_TIME TIMESTAMP(6),
    PEN_TWIN1              VARCHAR2(10),
    PEN_TWIN2              VARCHAR2(10),
    TWIN_REASON            VARCHAR2(2),
    RUN_DATE               VARCHAR2(8),
    TWIN_USER_ID           VARCHAR2(15)
);

--------------------------------------------------------
--  DDL for Index PEN_DEMOG_TX_PK
--------------------------------------------------------
CREATE UNIQUE INDEX API_PEN_REPLICATION.PEN_DEMOG_TX_PK ON API_PEN_REPLICATION.PEN_DEMOG_TX (TX_ID) TABLESPACE API_PEN_IDX;

--------------------------------------------------------
--  DDL for Index PEN_TWINS_TX_PK
--------------------------------------------------------
CREATE UNIQUE INDEX API_PEN_REPLICATION.PEN_TWINS_TX_PK ON API_PEN_REPLICATION.PEN_TWINS_TX (TX_ID) TABLESPACE API_PEN_IDX;

--------------------------------------------------------
--  DDL for table privileges
--------------------------------------------------------
GRANT SELECT, INSERT, UPDATE ON API_PEN_REPLICATION.PEN_DEMOG_TX TO RDB_TX_TO_PEN;
GRANT SELECT, INSERT, UPDATE ON API_PEN_REPLICATION.PEN_TWINS_TX TO RDB_TX_TO_PEN;

CREATE INDEX PEN_DEMOG_TX_STATUS_IDX ON PEN_DEMOG_TX (TX_STATUS) TABLESPACE API_PEN_IDX;
CREATE INDEX PEN_DEMOG_TX_STUD_NO_IDX ON PEN_DEMOG_TX (STUD_NO) TABLESPACE API_PEN_IDX;

CREATE INDEX PEN_TWINS_TX_PEN_TWIN1_IDX ON PEN_TWINS_TX (PEN_TWIN1) TABLESPACE API_PEN_IDX;
CREATE INDEX PEN_TWINS_TX_PEN_TWIN2_IDX ON PEN_TWINS_TX (PEN_TWIN2) TABLESPACE API_PEN_IDX;
CREATE INDEX PEN_TWINS_TX_STATUS_IDX ON PEN_TWINS_TX (TX_STATUS) TABLESPACE API_PEN_IDX;

CREATE TABLE PEN_REPLICATION_SAGA
(
    SAGA_ID     RAW(16)                             NOT NULL,
    SAGA_NAME   VARCHAR2(50)                        NOT NULL,
    SAGA_STATE  VARCHAR2(100)                       NOT NULL,
    PAYLOAD     BLOB                                NOT NULL,
    STATUS      VARCHAR2(20)                        NOT NULL,
    CREATE_USER VARCHAR2(32)                        NOT NULL,
    CREATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR2(32)                        NOT NULL,
    UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PEN_REPLICATION_SAGA_PK PRIMARY KEY (SAGA_ID)
) TABLESPACE API_PEN_BLOB_DATA;

CREATE INDEX PEN_REPLICATION_SAGA_STATUS_IDX ON PEN_REPLICATION_SAGA (STATUS) TABLESPACE API_PEN_IDX;
ALTER INDEX API_PEN_REPLICATION.PEN_REPLICATION_SAGA_PK REBUILD TABLESPACE API_PEN_IDX;

CREATE TABLE PEN_REPLICATION_SAGA_EVENT_STATES
(
    SAGA_EVENT_ID       RAW(16)                             NOT NULL,
    SAGA_ID             RAW(16)                             NOT NULL,
    SAGA_EVENT_STATE    VARCHAR2(100)                       NOT NULL,
    SAGA_EVENT_OUTCOME  VARCHAR2(100)                       NOT NULL,
    SAGA_STEP_NUMBER    INTEGER                             NOT NULL,
    SAGA_EVENT_RESPONSE BLOB,
    CREATE_USER         VARCHAR2(32)                        NOT NULL,
    CREATE_DATE         TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATE_USER         VARCHAR2(32)                        NOT NULL,
    UPDATE_DATE         TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PEN_REPLICATION_SAGA_EVENT_STATES_PK PRIMARY KEY (SAGA_EVENT_ID)
) TABLESPACE API_PEN_BLOB_DATA;
ALTER TABLE PEN_REPLICATION_SAGA_EVENT_STATES
    ADD CONSTRAINT PEN_REPLICATION_SAGA_EVENT_STATES_SAGA_ID_FK FOREIGN KEY (SAGA_ID) REFERENCES PEN_REPLICATION_SAGA (SAGA_ID);
CREATE INDEX PEN_REPLICATION_SAGA_EVENT_STATES_SAGA_ID_IDX ON PEN_REPLICATION_SAGA_EVENT_STATES (SAGA_ID) TABLESPACE API_PEN_IDX;
ALTER INDEX API_PEN_REPLICATION.PEN_REPLICATION_SAGA_EVENT_STATES_PK REBUILD TABLESPACE API_PEN_IDX;
